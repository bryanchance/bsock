Simple 'echo' proxyexec example
-------------------------------

As root, perform the following one-time setup steps.
Note that permission on dir allow/disallow access to socket within.
(Set permission mode 0700 to restrict access to self for testing.)
(Replace myusername with a specific user account.)
  $ mkdir -p -m 0700 /usr/local/var/run/proxyexec/echo/
  $ chown myusername /usr/local/var/run/proxyexec/echo/

As myusername (i.e. your account)), the following commands runs a proxyexec
daemon in the foreground.  Hit Ctrl-C to cancel.
  $ proxyexec -d -F -s /usr/local/var/run/proxyexec/echo/socket /bin/echo

As myusername, in separate xterm from above, access the proxyexec echo service:
  $ proxyexec -c echo hi
  echo hi

Note that the entire command is proxied, including argv0, the command.
Why is this useful?  The basename of the command is used to find the proxyexec
socket.  Consider this command, which provides the server with the information
that the client shell has, without discarding the original command.
  $ proxyexec -c /another/path/to/bin/echo hi
  /another/path/to/bin/echo hi

Instead of /bin/echo, you could use a wrapper script to manipulate, validate,
and pass arguments.  See Security notes below for some caveats and commentary.
An example wrapper script "echo_wrapper" to strip the command argument, and
skip validation (not a good idea):
  #!/bin/bash
  shift
  exec /bin/echo ${1+"$@"}

If the permissions on /usr/local/var/run/proxyexec/echo/ were 0755 (not +w !),
then other users would be able to send commands to proxyexec echo service and
/bin/echo would be run as myusername and return the results to those other
users.  Recommended proxyexec socket directory permissions are 0750 or 0755,
depending on whether the service should be restricted to a specific group or
open to all.  To permit access only to a specific group, use permissions 0750
and change the group ownership of /usr/local/var/run/proxyexec/echo/ to that
specific group.


gitolite example
----------------
See proxyexec/contrib/gitolite/README for how to use proxyexec with gitolite.
From http://sitaramc.github.com/gitolite/ :
"Gitolite allows you to setup git hosting on a central server, with
 fine-grained access control and many (many!) more powerful features."


Security
--------

proxyexec proxies command execution between different accounts without using
setuid.  However, many if not all precautions that should be taken with setuid
programs should also be taken with proxyexec target programs, since such
programs are running under different (privileged) accounts from that of the
requestor.  For example, proxyexec target commands should not offer shell
escapes which a requestor could use to take over a privileged account,
e.g. target commands *should not* be file editors, many of which offer shell
escapes.  Each proxyexec target command should be evaluated individually before
permitting access via proxyexec.

For each service, review the permissions on the path to the unix domain socket
on which proxyexec listens.  The directory containing the socket should be
writable only by the uid that runs the proxyexec daemon.  rx access to the
directory should be granted to the uid running the proxyexec daemon, and group
and other privileges should be granted only if members of those groups should
be able to submit requests to the specific service.

Depending on how proxyexec is used, it should be noted that proxyexec can be
used as an amplifier to cause a denial-of-service (DoS), due to proxyexec
forking a target process for each request received on the socket.  (Forking a
process is much more expensive than is connecting to a socket.)  proxyexec
does log the uid, gid, and socketpath of each request and so the misbehaving
account(s) can more easily be identified (unless proxyexec -d -q was used;
-q is not recommended).  This type of attack is similar to fork bombing a
machine but is mentioned here because resource limits on number of processes
on a requesting account restrict the origin account, but do not restrict the
account running the proxyexec daemon, unless resource limits are also applied
to the account running the proxyexec daemon.  If the daemon is serving multiple
accounts, restricting the number of processes allowed by the daemon account can
avoid resource exhaustion on the machine at the cost of possibly reducing the
availability of the specific service provided by the daemon.

proxyexec does not currently provide a mechanism to limit the number of
outstanding requests (i.e. number of running child processes), but might
do so in the future if there is sufficient demand for this feature.
